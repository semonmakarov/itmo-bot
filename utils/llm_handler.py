# utils/llm_handler.py
import os
import re  # <-- Добавьте этот импорт
import requests
from dotenv import load_dotenv
from utils.news_parser import get_latest_news

load_dotenv()

PERPLEXITY_API_KEY = os.getenv("PERPLEXITY_API_KEY")

def get_llm_response(query):
    try:
        headers = {
            "Authorization": f"Bearer {PERPLEXITY_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": "sonar",
            "messages": [
                {
                    "role": "system",
                    "content": """Вы эксперт по Университету ИТМО. Отвечайте ТОЛЬКО на русском языке. 
Формат ответа для вопросов с вариантами:
1. Определите правильный номер ответа
2. Объяснение с подтверждающими фактами
3. Ссылки на источники

Пример вопроса:
В каком городе находится ИТМО?
1. Москва
2. СПб

Пример ответа:
2. Санкт-Петербург"""
                },
                {
                    "role": "user",
                    "content": query
                }
            ]
        }

        response = requests.post(
            "https://api.perplexity.ai/chat/completions",
            json=payload,
            headers=headers,
            timeout=15
        )

        if response.status_code == 200:
            result = response.json()
            return {
                "content": result['choices'][0]['message']['content'],
                "sources": result.get('citations', [])
            }
        else:
            print(f"API Error: {response.status_code}, {response.text}")
            return {
                "content": f"Error: API request failed with status {response.status_code}",
                "sources": []
            }

    except Exception as e:
        print(f"Exception: {str(e)}")
        return {
            "content": f"Error: {str(e)}",
            "sources": []
        }

def process_query(query, query_id, has_options):
    llm_response = get_llm_response(query)
    
    answer = None
    # Удаляем источники в квадратных скобках и блок "Источники:"
    cleaned_content = re.sub(
        r'(\[\d+\]|Источники:.*)', 
        '', 
        llm_response['content'], 
        flags=re.DOTALL
    ).strip()
    
    reasoning = f"{cleaned_content} [Generated by Perplexity]"
    sources = llm_response['sources'][:3]

    if has_options:
        answer = extract_answer_number(cleaned_content)

    return {
        "id": query_id,
        "answer": answer,
        "reasoning": reasoning,
        "sources": sources
    }

def extract_answer_number(text):
    patterns = [
        r'\b(\d+)\.?(\s|$)',
        r'[Пп]равильный ответ:?\s*(\d+)',
        r'[Вв]ариант\s*(\d+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            num = int(match.group(1))
            if 1 <= num <= 10:
                return num
    return None